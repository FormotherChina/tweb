{"version":3,"sources":["webpack:///./src/components/monkeys/password.ts","webpack:///./src/pages/pagePassword.ts","webpack:///./src/helpers/dom/replaceContent.ts","webpack:///./src/components/inputField.ts","webpack:///./src/helpers/dom/selectElementContents.ts","webpack:///./src/components/singleTransition.ts","webpack:///./src/helpers/dom/toggleDisability.ts","webpack:///./src/helpers/dom/getRichValue.ts","webpack:///./src/lib/mtproto/passwordManager.ts","webpack:///./src/helpers/dom/findUpAttribute.ts","webpack:///./src/helpers/dom/getRichElementValue.ts","webpack:///./src/helpers/dom/isInputEmpty.ts","webpack:///./src/pages/loginPage.ts","webpack:///./src/components/passwordInputField.ts","webpack:///./src/helpers/dom/htmlToSpan.ts"],"names":["PasswordMonkey","passwordInputField","size","needFrame","this","container","document","createElement","classList","add","loadPromise","loadAnimationAsAsset","loop","autoplay","width","height","noCache","then","_animation","animation","addEventListener","currentFrame","direction","setSpeed","pause","onVisibilityClickAdditional","passwordVisible","setDirection","curFrame","play","waitForFirstFrame","remove","passwordInput","page","className","withInputWrapper","titleLangKey","subtitleLangKey","btnNext","btnNextI18n","IntlElement","key","append","element","label","name","getStateInterval","input","inputWrapper","state","getState","window","setInterval","_state","hint","wrapEmojiText","setLabel","onSubmit","e","value","length","toggle","update","preloader","setValueSilently","Math","random","check","response","_","clearInterval","m","default","mount","monkey","removeAttribute","catch","err","type","select","isMobile","imageDiv","Promise","all","load","focus","pushToState","replaceContent","elem","node","innerHTML","firstChild","lastChild","replaceWith","textContent","init","findUpAttribute","target","preventDefault","text","originalEvent","clipboardData","getData","entities","parseEntities","filter","wrapRichText","noLinks","wrappingDraft","execCommand","InputState","options","required","validate","undefined","maxLength","showLengthOn","min","round","placeholder","plainText","canBeEdited","processInput","labelText","firstElementChild","String","observer","MutationObserver","isInputEmpty","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","setAttribute","border","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","getRichValue","diff","isError","el","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","selectElementContents","labelOptions","setHeight","scrollHeight","newHeight","currentHeight","style","replace","transitionDuration","log","abs","fireFakeInput","originalValue","isValid","isChanged","silent","wrapDraftText","setDraftValue","Error","Valid","setState","SetTransition","forwards","duration","onTransitionEnd","useRafs","timeout","raf","dataset","clearTimeout","cancelAnimationFrame","settings","animationsEnabled","requestAnimationFrame","afterTimeout","setTimeout","toggleDisability","elements","disable","forEach","field","withEntities","lines","line","push","join","combineSameEntities","passwordManager","invokeApi","result","currentHashPromise","newHashPromise","params","password","new_settings","email","currentPassword","invokeCrypto","resolve","newAlgo","new_algo","salt1","Uint8Array","randomize","set","newPassword","hashes","new_password_hash","inputCheckPassword","auth","setUser","user","code","attribute","closest","markdownTags","bold","match","entityName","underline","italic","monospace","strikethrough","link","mentionName","getRichElementValue","selNode","selOffset","offset","nodeType","nodeValue","substr","trim","parentNode","parentElement","tag","getAttribute","url","href","user_id","follow","toUserId","isSelected","isBlock","tagName","splice","HTMLImageElement","alt","curChild","nextSibling","hasAttribute","LoginPage","body","querySelector","title","subtitle","PasswordInputField","super","onVisibilityClick","toggleVisible","autocomplete","stealthy","tabIndex","prepend","insertBefore","cloneNode","htmlToSpan","html","span"],"mappings":"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","file":"15.0d2dcbd4a0520a90937d.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport lottieLoader, { LottieLoader } from \"../../lib/rlottie/lottieLoader\";\r\nimport RLottiePlayer from \"../../lib/rlottie/rlottiePlayer\";\r\nimport PasswordInputField from \"../passwordInputField\";\r\n\r\nexport default class PasswordMonkey {\r\n  public container: HTMLElement;\r\n  public animation: RLottiePlayer;\r\n  public needFrame = 0;\r\n  protected loadPromise: ReturnType<LottieLoader['waitForFirstFrame']>;\r\n\r\n  constructor(protected passwordInputField: PasswordInputField, protected size: number) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('media-sticker-wrapper');\r\n  }\r\n\r\n  public load() {\r\n    if(this.loadPromise) return this.loadPromise;\r\n    return this.loadPromise = lottieLoader.loadAnimationAsAsset({\r\n      container: this.container,\r\n      loop: false,\r\n      autoplay: false,\r\n      width: this.size,\r\n      height: this.size,\r\n      noCache: true\r\n    //}, 'assets/img/TwoFactorSetupMonkeyClose.tgs').then(_animation => {\r\n    }, 'TwoFactorSetupMonkeyPeek').then(_animation => {\r\n      //return;\r\n      this.animation = _animation;\r\n      this.animation.addEventListener('enterFrame', currentFrame => {\r\n        //console.log('enterFrame', currentFrame, this.needFrame);\r\n\r\n        if((this.animation.direction === 1 && currentFrame >= this.needFrame) ||\r\n          (this.animation.direction === -1 && currentFrame <= this.needFrame)) {\r\n            this.animation.setSpeed(1);\r\n            this.animation.pause();\r\n        } \r\n      });\r\n\r\n      this.passwordInputField.onVisibilityClickAdditional = () => {\r\n        if(this.passwordInputField.passwordVisible) {\r\n          this.animation.setDirection(1);\r\n          this.animation.curFrame = 0;\r\n          this.needFrame = 16;\r\n          this.animation.play();\r\n        } else {\r\n          this.animation.setDirection(-1);\r\n          this.animation.curFrame = 16;\r\n          this.needFrame = 0;\r\n          this.animation.play();\r\n        }\r\n      };\r\n\r\n      return lottieLoader.waitForFirstFrame(_animation);\r\n    });\r\n  }\r\n\r\n  public remove() {\r\n    if(this.animation) {\r\n      this.animation.remove();\r\n    }\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { putPreloader } from '../components/misc';\r\nimport mediaSizes from '../helpers/mediaSizes';\r\nimport { AccountPassword } from '../layer';\r\nimport appStateManager from '../lib/appManagers/appStateManager';\r\nimport passwordManager from '../lib/mtproto/passwordManager';\r\nimport Page from './page';\r\nimport Button from '../components/button';\r\nimport PasswordInputField from '../components/passwordInputField';\r\nimport PasswordMonkey from '../components/monkeys/password';\r\nimport RichTextProcessor from '../lib/richtextprocessor';\r\nimport I18n from '../lib/langPack';\r\nimport LoginPage from './loginPage';\r\nimport { cancelEvent } from '../helpers/dom/cancelEvent';\r\nimport { attachClickEvent } from '../helpers/dom/clickEvent';\r\nimport htmlToSpan from '../helpers/dom/htmlToSpan';\r\nimport replaceContent from '../helpers/dom/replaceContent';\r\nimport toggleDisability from '../helpers/dom/toggleDisability';\r\n\r\nconst TEST = false;\r\nlet passwordInput: HTMLInputElement;\r\n\r\nlet onFirstMount = (): Promise<any> => {\r\n  const page = new LoginPage({\r\n    className: 'page-password',\r\n    withInputWrapper: true,\r\n    titleLangKey: 'Login.Password.Title',\r\n    subtitleLangKey: 'Login.Password.Subtitle'\r\n  });\r\n\r\n  const btnNext = Button('btn-primary btn-color-primary');\r\n  const btnNextI18n = new I18n.IntlElement({key: 'Login.Next'});\r\n\r\n  btnNext.append(btnNextI18n.element);\r\n\r\n  const passwordInputField = new PasswordInputField({\r\n    label: 'LoginPassword',\r\n    name: 'password'\r\n  });\r\n\r\n  passwordInput = passwordInputField.input as HTMLInputElement;\r\n\r\n  page.inputWrapper.append(passwordInputField.container, btnNext);\r\n\r\n  let getStateInterval: number;\r\n\r\n  let getState = () => {\r\n    // * just to check session relevance\r\n    if(!getStateInterval) {\r\n      getStateInterval = window.setInterval(getState, 10e3);\r\n    }\r\n\r\n    return !TEST && passwordManager.getState().then(_state => {\r\n      state = _state;\r\n\r\n      if(state.hint) {\r\n        replaceContent(passwordInputField.label, htmlToSpan(RichTextProcessor.wrapEmojiText(state.hint)));\r\n      } else {\r\n        passwordInputField.setLabel();\r\n      }\r\n    });\r\n  };\r\n\r\n  let state: AccountPassword;\r\n  \r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    if(!passwordInput.value.length) {\r\n      passwordInput.classList.add('error');\r\n      return;\r\n    }\r\n\r\n    const toggle = toggleDisability([passwordInput, btnNext], true);\r\n    let value = passwordInput.value;\r\n\r\n    btnNextI18n.update({key: 'PleaseWait'});\r\n    const preloader = putPreloader(btnNext);\r\n\r\n    passwordInputField.setValueSilently('' + Math.random()); // prevent saving suggestion\r\n    passwordInputField.setValueSilently(value); // prevent saving suggestion\r\n\r\n    passwordManager.check(value, state).then((response) => {\r\n      //console.log('passwordManager response:', response);\r\n        \r\n      switch(response._) {\r\n        case 'auth.authorization':\r\n          clearInterval(getStateInterval);\r\n          import('./pageIm').then(m => {\r\n            m.default.mount();\r\n          });\r\n          if(monkey) monkey.remove();\r\n          break;\r\n        default:\r\n          btnNext.removeAttribute('disabled');\r\n          btnNextI18n.update({key: response._ as any});\r\n          preloader.remove();\r\n          break;\r\n      }\r\n    }).catch((err: any) => {\r\n      toggle();\r\n      passwordInputField.input.classList.add('error');\r\n      \r\n      switch(err.type) {\r\n        default:\r\n          //btnNext.innerText = err.type;\r\n          btnNextI18n.update({key: 'PASSWORD_HASH_INVALID'});\r\n          passwordInput.select();\r\n          break;\r\n      }\r\n\r\n      preloader.remove();\r\n  \r\n      getState();\r\n    });\r\n  };\r\n  \r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  passwordInput.addEventListener('keypress', function(this, e) {\r\n    this.classList.remove('error');\r\n    btnNextI18n.update({key: 'Login.Next'});\r\n\r\n    if(e.key === 'Enter') {\r\n      return onSubmit();\r\n    }\r\n  });\r\n\r\n  const size = mediaSizes.isMobile ? 100 : 166;\r\n  const monkey = new PasswordMonkey(passwordInputField, size);\r\n  page.imageDiv.append(monkey.container);\r\n  return Promise.all([\r\n    monkey.load(),\r\n    getState()\r\n  ]);\r\n};\r\n\r\nconst page = new Page('page-password', true, onFirstMount, null, () => {\r\n  //if(!isAppleMobile) {\r\n    passwordInput.focus();\r\n  //}\r\n\r\n  appStateManager.pushToState('authState', {_: 'authStatePassword'});\r\n});\r\n\r\nexport default page;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function replaceContent(elem: HTMLElement, node: string | Node) {\r\n  if(typeof(node) === 'string') {\r\n    elem.innerHTML = node;\r\n    return;\r\n  }\r\n\r\n  // * children.length doesn't count text nodes\r\n  const firstChild = elem.firstChild;\r\n  if(firstChild) {\r\n    if(elem.lastChild === firstChild) {\r\n      firstChild.replaceWith(node);\r\n    } else {\r\n      elem.textContent = '';\r\n      elem.append(node);\r\n    }\r\n  } else {\r\n    elem.append(node);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport simulateEvent from \"../helpers/dom/dispatchEvent\";\r\nimport findUpAttribute from \"../helpers/dom/findUpAttribute\";\r\nimport getRichValue from \"../helpers/dom/getRichValue\";\r\nimport isInputEmpty from \"../helpers/dom/isInputEmpty\";\r\nimport selectElementContents from \"../helpers/dom/selectElementContents\";\r\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\r\nimport RichTextProcessor from \"../lib/richtextprocessor\";\r\nimport SetTransition from \"./singleTransition\";\r\n\r\nlet init = () => {\r\n  document.addEventListener('paste', (e) => {\r\n    if(!findUpAttribute(e.target, 'contenteditable=\"true\"')) {\r\n      return;\r\n    }\r\n    //console.log('document paste');\r\n\r\n    //console.log('messageInput paste');\r\n\r\n    e.preventDefault();\r\n    // @ts-ignore\r\n    let text = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n\r\n    let entities = RichTextProcessor.parseEntities(text);\r\n    //console.log('messageInput paste', text, entities);\r\n    entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n    //text = RichTextProcessor.wrapEmojiText(text);\r\n    text = RichTextProcessor.wrapRichText(text, {entities, noLinks: true, wrappingDraft: true});\r\n\r\n    // console.log('messageInput paste after', text);\r\n\r\n    // @ts-ignore\r\n    //let html = (e.originalEvent || e).clipboardData.getData('text/html');\r\n\r\n    // @ts-ignore\r\n    //console.log('paste text', text, );\r\n    window.document.execCommand('insertHTML', false, text);\r\n  });\r\n\r\n  init = null;\r\n};\r\n\r\n// ! it doesn't respect symbols other than strongs\r\n/* const checkAndSetRTL = (input: HTMLElement) => {\r\n  //const isEmpty = isInputEmpty(input);\r\n  //console.log('input', isEmpty);\r\n\r\n  //const char = [...getRichValue(input)][0];\r\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\r\n  let direction = 'ltr';\r\n  if(char && checkRTL(char)) {\r\n    direction = 'rtl';\r\n  }\r\n\r\n  //console.log('RTL', direction, char);\r\n\r\n  input.style.direction = direction;\r\n}; */\r\n\r\nexport enum InputState {\r\n  Neutral = 0,\r\n  Valid = 1,\r\n  Error = 2\r\n};\r\n\r\nexport type InputFieldOptions = {\r\n  placeholder?: LangPackKey, \r\n  label?: LangPackKey, \r\n  labelOptions?: any[],\r\n  labelText?: string,\r\n  name?: string, \r\n  maxLength?: number, \r\n  showLengthOn?: number,\r\n  plainText?: true,\r\n  animate?: boolean,\r\n  required?: boolean,\r\n  canBeEdited?: boolean,\r\n  validate?: () => boolean\r\n};\r\n\r\nclass InputField {\r\n  public container: HTMLElement;\r\n  public input: HTMLElement;\r\n  public inputFake: HTMLElement;\r\n  public label: HTMLLabelElement;\r\n\r\n  public originalValue: string;\r\n\r\n  public required: boolean;\r\n  public validate: () => boolean;\r\n\r\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\r\n  // protected wasInputFakeClientHeight: number;\r\n  // protected showScrollDebounced: () => void;\r\n\r\n  constructor(public options: InputFieldOptions = {}) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('input-field');\r\n\r\n    this.required = options.required;\r\n    this.validate = options.validate;\r\n\r\n    if(options.maxLength !== undefined && options.showLengthOn === undefined) {\r\n      options.showLengthOn = Math.min(40, Math.round(options.maxLength / 3));\r\n    }\r\n\r\n    const {placeholder, maxLength, showLengthOn, name, plainText, canBeEdited} = options;\r\n\r\n    let label = options.label || options.labelText;\r\n\r\n    let input: HTMLElement;\r\n    if(!plainText) {\r\n      if(init) {\r\n        init();\r\n      }\r\n\r\n      this.container.innerHTML = `\r\n      <div contenteditable=\"${String(!!canBeEdited)}\" class=\"input-field-input\"></div>\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      const observer = new MutationObserver(() => {\r\n        //checkAndSetRTL(input);\r\n\r\n        if(processInput) {\r\n          processInput();\r\n        }\r\n      });\r\n\r\n      // * because if delete all characters there will br left\r\n      input.addEventListener('input', () => {\r\n        if(isInputEmpty(input)) {\r\n          input.innerHTML = '';\r\n        }\r\n\r\n        if(this.inputFake) {\r\n          this.inputFake.innerHTML = input.innerHTML;\r\n          this.onFakeInput();\r\n        }\r\n      });\r\n      \r\n      // ! childList for paste first symbol\r\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\r\n\r\n      if(options.animate) {\r\n        input.classList.add('scrollable', 'scrollable-y');\r\n        // this.wasInputFakeClientHeight = 0;\r\n        // this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\r\n        this.inputFake = document.createElement('div');\r\n        this.inputFake.setAttribute('contenteditable', 'true');\r\n        this.inputFake.className = input.className + ' input-field-input-fake';\r\n      }\r\n    } else {\r\n      this.container.innerHTML = `\r\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      //input.addEventListener('input', () => checkAndSetRTL(input));\r\n    }\r\n\r\n    input.setAttribute('dir', 'auto');\r\n\r\n    if(placeholder) {\r\n      _i18n(input, placeholder, undefined, 'placeholder');\r\n\r\n      if(this.inputFake) {\r\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\r\n      }\r\n    }\r\n\r\n    if(label || placeholder) {\r\n      const border = document.createElement('div');\r\n      border.classList.add('input-field-border');\r\n      this.container.append(border);\r\n    }\r\n\r\n    if(label) {\r\n      this.label = document.createElement('label');\r\n      this.setLabel();\r\n      this.container.append(this.label);\r\n    }\r\n\r\n    let processInput: () => void;\r\n    if(maxLength) {\r\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\r\n      let showingLength = false;\r\n\r\n      processInput = () => {\r\n        const wasError = input.classList.contains('error');\r\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\r\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input, false).value].length;\r\n        const diff = maxLength - inputLength;\r\n        const isError = diff < 0;\r\n        input.classList.toggle('error', isError);\r\n\r\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\r\n\r\n        if(isError || diff <= showLengthOn) {\r\n          this.setLabel();\r\n          labelEl.append(` (${maxLength - inputLength})`);\r\n          if(!showingLength) showingLength = true;\r\n        } else if((wasError && !isError) || showingLength) {\r\n          this.setLabel();\r\n          showingLength = false;\r\n        }\r\n      };\r\n\r\n      input.addEventListener('input', processInput);\r\n    }\r\n\r\n    this.input = input;\r\n  }\r\n\r\n  public select() {\r\n    if(!this.value) { // * avoid selecting whole empty field on iOS devices\r\n      return;\r\n    }\r\n\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).select(); // * select text\r\n    } else {\r\n      selectElementContents(this.input);\r\n    }\r\n  }\r\n\r\n  public setLabel() {\r\n    this.label.textContent = '';\r\n    if(this.options.labelText) {\r\n      this.label.innerHTML = this.options.labelText;\r\n    } else {\r\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\r\n    }\r\n  }\r\n\r\n  public onFakeInput(setHeight = true) {\r\n    const {scrollHeight: newHeight/* , clientHeight */} = this.inputFake;\r\n    /* if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\r\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\r\n      this.showScrollDebounced();\r\n    } */\r\n\r\n    const currentHeight = +this.input.style.height.replace('px', '');\r\n    if(currentHeight === newHeight) {\r\n      return;\r\n    }\r\n\r\n    const TRANSITION_DURATION_FACTOR = 50;\r\n    const transitionDuration = Math.round(\r\n      TRANSITION_DURATION_FACTOR * Math.log(Math.abs(newHeight - currentHeight)),\r\n    );\r\n\r\n    // this.wasInputFakeClientHeight = clientHeight;\r\n    this.input.style.transitionDuration = `${transitionDuration}ms`;\r\n\r\n    if(setHeight) {\r\n      this.input.style.height = newHeight ? newHeight + 'px' : '';\r\n    }\r\n\r\n    const className = 'is-changing-height';\r\n    SetTransition(this.input, className, true, transitionDuration, () => {\r\n      this.input.classList.remove(className);\r\n    });\r\n  }\r\n\r\n  get value() {\r\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input, false).value;\r\n    //return getRichValue(this.input);\r\n  }\r\n\r\n  set value(value: string) {\r\n    this.setValueSilently(value, false);\r\n\r\n    simulateEvent(this.input, 'input');\r\n  }\r\n\r\n  public setValueSilently(value: string, fireFakeInput = true) {\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).value = value;\r\n    } else {\r\n      this.input.innerHTML = value;\r\n      \r\n      if(this.inputFake) {\r\n        this.inputFake.innerHTML = value;\r\n\r\n        if(fireFakeInput) {\r\n          this.onFakeInput();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isChanged() {\r\n    return this.value !== this.originalValue;\r\n  }\r\n\r\n  public isValid() {\r\n    return !this.input.classList.contains('error') && \r\n      (!this.validate || this.validate()) && \r\n      (!this.required || !isInputEmpty(this.input));\r\n  }\r\n\r\n  public isValidToChange() {\r\n    return this.isValid() && this.isChanged();\r\n  }\r\n\r\n  public setDraftValue(value = '', silent = false) {\r\n    if(!this.options.plainText) {\r\n      value = RichTextProcessor.wrapDraftText(value);\r\n    }\r\n\r\n    if(silent) {\r\n      this.setValueSilently(value, false); \r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\r\n    this.originalValue = value;\r\n    this.setDraftValue(value, silent);\r\n  }\r\n\r\n  public setState(state: InputState, label?: LangPackKey) {\r\n    if(label) {\r\n      this.label.textContent = '';\r\n      this.label.append(i18n(label, this.options.labelOptions));\r\n    }\r\n\r\n    this.input.classList.toggle('error', !!(state & InputState.Error));\r\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\r\n  }\r\n\r\n  public setError(label?: LangPackKey) {\r\n    this.setState(InputState.Error, label);\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","// https://stackoverflow.com/a/6150060\nexport default function selectElementContents(el: HTMLElement) {\n  const range = document.createRange();\n  range.selectNodeContents(el);\n  const sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range);\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport rootScope from \"../lib/rootScope\";\r\n\r\nconst SetTransition = (\r\n  element: HTMLElement, \r\n  className: string, \r\n  forwards: boolean, \r\n  duration: number, \r\n  onTransitionEnd?: () => void, \r\n  useRafs?: number\r\n) => {\r\n  const {timeout, raf} = element.dataset;\r\n  if(timeout !== undefined) {\r\n    clearTimeout(+timeout);\r\n  }\r\n\r\n  if(raf !== undefined) {\r\n    window.cancelAnimationFrame(+raf);\r\n    if(!useRafs) {\r\n      delete element.dataset.raf;\r\n    }\r\n  }\r\n\r\n  // if(forwards && className && element.classList.contains(className) && !element.classList.contains('animating')) {\r\n  //   return;\r\n  // }\r\n\r\n  if(useRafs && rootScope.settings.animationsEnabled && duration) {\r\n    element.dataset.raf = '' + window.requestAnimationFrame(() => {\r\n      delete element.dataset.raf;\r\n      SetTransition(element, className, forwards, duration, onTransitionEnd, useRafs - 1);\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  if(forwards && className) {\r\n    element.classList.add(className);\r\n  }\r\n\r\n  const afterTimeout = () => {\r\n    delete element.dataset.timeout;\r\n    if(!forwards && className) {\r\n      element.classList.remove('backwards', className);\r\n    }\r\n\r\n    element.classList.remove('animating');\r\n    \r\n    onTransitionEnd && onTransitionEnd();\r\n  };\r\n\r\n  if(!rootScope.settings.animationsEnabled || !duration) {\r\n    element.classList.remove('animating', 'backwards');\r\n    afterTimeout();\r\n    return;\r\n  }\r\n\r\n  element.classList.add('animating');\r\n\r\n  element.classList.toggle('backwards', !forwards);\r\n  element.dataset.timeout = '' + setTimeout(afterTimeout, duration);\r\n};\r\n\r\nexport default SetTransition;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function toggleDisability(elements: HTMLElement[], disable: boolean) {\r\n  if(disable) {\r\n    elements.forEach(el => el.setAttribute('disabled', 'true'));\r\n  } else {\r\n    elements.forEach(el => el.removeAttribute('disabled'));\r\n  }\r\n\r\n  return () => toggleDisability(elements, !disable);\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { MessageEntity } from \"../../layer\";\r\nimport RichTextProcessor from \"../../lib/richtextprocessor\";\r\nimport getRichElementValue from \"./getRichElementValue\";\r\n\r\nexport default function getRichValue(field: HTMLElement, withEntities = true) {\r\n  const lines: string[] = [];\r\n  const line: string[] = [];\r\n\r\n  const entities: MessageEntity[] = withEntities ? [] : undefined;\r\n  getRichElementValue(field, lines, line, undefined, undefined, entities);\r\n  if(line.length) {\r\n    lines.push(line.join(''));\r\n  }\r\n\r\n  let value = lines.join('\\n');\r\n  value = value.replace(/\\u00A0/g, ' ');\r\n\r\n  if(entities) {\r\n    RichTextProcessor.combineSameEntities(entities);\r\n  }\r\n\r\n  //console.log('getRichValue:', value, entities);\r\n\r\n  return {value, entities};\r\n}\r\n\r\nMOUNT_CLASS_TO.getRichValue = getRichValue;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { AccountPassword, AccountUpdatePasswordSettings, InputCheckPasswordSRP, PasswordKdfAlgo } from '../../layer';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\nimport apiManager from './mtprotoworker';\r\n\r\nexport class PasswordManager {\r\n  public getState(): Promise<AccountPassword> {\r\n    return apiManager.invokeApi('account.getPassword').then((result) => {\r\n      return result;\r\n    });\r\n  }\r\n\r\n  public updateSettings(settings: {\r\n    hint?: string,\r\n    email?: string,\r\n    newPassword?: string,\r\n    currentPassword?: string\r\n  } = {}) {\r\n    //state = Object.assign({}, state);\r\n    //state.new_algo = Object.assign({}, state.new_algo);\r\n\r\n    return this.getState().then(state => {\r\n      let currentHashPromise: Promise<InputCheckPasswordSRP>;\r\n      let newHashPromise: Promise<Uint8Array>;\r\n      const params: AccountUpdatePasswordSettings = {\r\n        password: null,\r\n        new_settings: {\r\n          _: 'account.passwordInputSettings',\r\n          hint: settings.hint,\r\n          email: settings.email\r\n        }\r\n      };\r\n  \r\n      if(settings.currentPassword) {\r\n        currentHashPromise = apiManager.invokeCrypto('computeSRP', settings.currentPassword, state, false) as any;\r\n      } else {\r\n        currentHashPromise = Promise.resolve({\r\n          _: 'inputCheckPasswordEmpty'\r\n        });\r\n      }\r\n  \r\n      // * https://core.telegram.org/api/srp#setting-a-new-2fa-password, but still there is a mistake, TDesktop passes 'new_algo' everytime\r\n      const newAlgo = state.new_algo as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\r\n      const salt1 = new Uint8Array(newAlgo.salt1.length + 32);\r\n      salt1.randomize();\r\n      salt1.set(newAlgo.salt1, 0);\r\n      newAlgo.salt1 = salt1;\r\n  \r\n      if(settings.newPassword) {\r\n        newHashPromise = apiManager.invokeCrypto('computeSRP', settings.newPassword, state, true) as any;\r\n      } else {\r\n        newHashPromise = Promise.resolve(new Uint8Array());\r\n      }\r\n  \r\n      return Promise.all([currentHashPromise, newHashPromise]).then((hashes) => {\r\n        params.password = hashes[0];\r\n        params.new_settings.new_algo = newAlgo;\r\n        params.new_settings.new_password_hash = hashes[1];\r\n  \r\n        return apiManager.invokeApi('account.updatePasswordSettings', params);\r\n      });\r\n    });\r\n  }\r\n\r\n  public check(password: string, state: AccountPassword, options: any = {}) {\r\n    return apiManager.invokeCrypto('computeSRP', password, state, false).then((inputCheckPassword) => {\r\n      //console.log('SRP', inputCheckPassword);\r\n      return apiManager.invokeApi('auth.checkPassword', {\r\n        password: inputCheckPassword as InputCheckPasswordSRP.inputCheckPasswordSRP\r\n      }, options).then(auth => {\r\n        if(auth._ === 'auth.authorization') {\r\n          apiManager.setUser(auth.user);\r\n        }\r\n\r\n        return auth;\r\n      });\r\n    });\r\n  }\r\n\r\n  public confirmPasswordEmail(code: string) {\r\n    return apiManager.invokeApi('account.confirmPasswordEmail', {code});\r\n  }\r\n\r\n  public resendPasswordEmail() {\r\n    return apiManager.invokeApi('account.resendPasswordEmail');\r\n  }\r\n\r\n  public cancelPasswordEmail() {\r\n    return apiManager.invokeApi('account.cancelPasswordEmail');\r\n  }\r\n\r\n  /* public requestRecovery(options: any = {}) {\r\n    return apiManager.invokeApi('auth.requestPasswordRecovery', {}, options);\r\n  }\r\n\r\n  public recover(code: any, options: any = {}) {\r\n    return apiManager.invokeApi('auth.recoverPassword', {\r\n      code\r\n    }, options);\r\n  } */\r\n}\r\n\r\nconst passwordManager = new PasswordManager();\r\nMOUNT_CLASS_TO.passwordManager = passwordManager;\r\nexport default passwordManager;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function findUpAttribute(el: any, attribute: string): HTMLElement {\r\n  return el.closest(`[${attribute}]`);\r\n  /* if(el.getAttribute(attribute) !== null) return el; // 03.02.2020\r\n\r\n  while(el.parentElement) {\r\n    el = el.parentElement;\r\n    if(el.getAttribute(attribute) !== null) \r\n      return el;\r\n  }\r\n  return null; */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\n\r\nexport type MarkdownType = 'bold' | 'italic' | 'underline' | 'strikethrough' | 'monospace' | 'link' | 'mentionName';\r\nexport type MarkdownTag = {\r\n  match: string,\r\n  entityName: 'messageEntityBold' | 'messageEntityUnderline' | 'messageEntityItalic' | 'messageEntityPre' | 'messageEntityStrike' | 'messageEntityTextUrl' | 'messageEntityMentionName';\r\n};\r\nexport const markdownTags: {[type in MarkdownType]: MarkdownTag} = {\r\n  bold: {\r\n    match: '[style*=\"font-weight\"], b',\r\n    entityName: 'messageEntityBold'\r\n  },\r\n  underline: {\r\n    match: '[style*=\"underline\"], u',\r\n    entityName: 'messageEntityUnderline'\r\n  },\r\n  italic: {\r\n    match: '[style*=\"italic\"], i',\r\n    entityName: 'messageEntityItalic'\r\n  },\r\n  monospace: {\r\n    match: '[style*=\"monospace\"], [face=\"monospace\"], pre',\r\n    entityName: 'messageEntityPre'\r\n  },\r\n  strikethrough: {\r\n    match: '[style*=\"line-through\"], strike',\r\n    entityName: 'messageEntityStrike'\r\n  },\r\n  link: {\r\n    match: 'A:not(.follow)',\r\n    entityName: 'messageEntityTextUrl'\r\n  },\r\n  mentionName: {\r\n    match: 'A.follow',\r\n    entityName: 'messageEntityMentionName'\r\n  }\r\n};\r\n\r\nexport default function getRichElementValue(node: HTMLElement, lines: string[], line: string[], selNode?: Node, selOffset?: number, entities?: MessageEntity[], offset = {offset: 0}) {\r\n  if(node.nodeType === 3) { // TEXT\r\n    const nodeValue = node.nodeValue;\r\n\r\n    if(selNode === node) {\r\n      line.push(nodeValue.substr(0, selOffset) + '\\x01' + nodeValue.substr(selOffset));\r\n    } else {\r\n      line.push(nodeValue);\r\n    }\r\n\r\n    if(entities && nodeValue.trim()) {\r\n      if(node.parentNode) {\r\n        const parentElement = node.parentElement;\r\n        \r\n        for(const type in markdownTags) {\r\n          const tag = markdownTags[type as MarkdownType];\r\n          const closest = parentElement.closest(tag.match + ', [contenteditable]');\r\n          if(closest && closest.getAttribute('contenteditable') === null) {\r\n            if(tag.entityName === 'messageEntityTextUrl') {\r\n              entities.push({\r\n                _: tag.entityName,\r\n                url: (parentElement as HTMLAnchorElement).href,\r\n                offset: offset.offset,\r\n                length: nodeValue.length\r\n              });\r\n            } else if(tag.entityName === 'messageEntityMentionName') {\r\n              entities.push({\r\n                _: tag.entityName,\r\n                offset: offset.offset,\r\n                length: nodeValue.length,\r\n                user_id: parentElement.dataset.follow.toUserId()\r\n              });\r\n            } else {\r\n              entities.push({\r\n                _: tag.entityName as any,\r\n                offset: offset.offset,\r\n                length: nodeValue.length\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    offset.offset += nodeValue.length;\r\n\r\n    return;\r\n  }\r\n\r\n  if(node.nodeType !== 1) { // NON-ELEMENT\r\n    return;\r\n  }\r\n\r\n  const isSelected = (selNode === node);\r\n  const isBlock = node.tagName === 'DIV' || node.tagName === 'P';\r\n  if(isBlock && line.length || node.tagName === 'BR') {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n  } else if(node instanceof HTMLImageElement) {\r\n    const alt = node.alt;\r\n    if(alt) {\r\n      line.push(alt);\r\n      offset.offset += alt.length;\r\n    }\r\n  }\r\n\r\n  if(isSelected && !selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  let curChild = node.firstChild as HTMLElement;\r\n  while(curChild) {\r\n    getRichElementValue(curChild, lines, line, selNode, selOffset, entities, offset);\r\n    curChild = curChild.nextSibling as any;\r\n  }\r\n\r\n  if(isSelected && selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  if(isBlock && line.length) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport getRichValue from \"./getRichValue\";\r\n\r\nexport default function isInputEmpty(element: HTMLElement) {\r\n  if(element.hasAttribute('contenteditable') || element.tagName !== 'INPUT') {\r\n    /* const value = element.innerText;\r\n\r\n    return !value.trim() && !serializeNodes(Array.from(element.childNodes)).trim(); */\r\n    return !getRichValue(element, false).value.trim();\r\n  } else {\r\n    return !(element as HTMLInputElement).value.trim();\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { LangPackKey, i18n } from \"../lib/langPack\";\r\n\r\nexport default class LoginPage {\r\n  public element: HTMLElement;\r\n  public container: HTMLElement;\r\n  public imageDiv: HTMLElement;\r\n  public inputWrapper: HTMLElement;\r\n  public title: HTMLElement;\r\n  public subtitle: HTMLParagraphElement;\r\n\r\n  constructor(options: {\r\n    className: string,\r\n    withInputWrapper?: boolean,\r\n    titleLangKey?: LangPackKey,\r\n    subtitleLangKey?: LangPackKey,\r\n  }) {\r\n    this.element = document.body.querySelector('.' + options.className) as HTMLDivElement;\r\n    //this.element = document.createElement('div');\r\n    //this.element.className = 'page-' + options.className;\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = 'container center-align';\r\n\r\n    this.imageDiv = document.createElement('div');\r\n    this.imageDiv.className = 'auth-image';\r\n\r\n    this.title = document.createElement('h4');\r\n    if(options.titleLangKey) {\r\n      this.title.append(i18n(options.titleLangKey));\r\n    }\r\n\r\n    this.subtitle = document.createElement('p');\r\n    this.subtitle.className = 'subtitle';\r\n    if(options.subtitleLangKey) {\r\n      this.subtitle.append(i18n(options.subtitleLangKey));\r\n    }\r\n    \r\n    this.container.append(this.imageDiv, this.title, this.subtitle);\r\n\r\n    if(options.withInputWrapper) {\r\n      this.inputWrapper = document.createElement('div');\r\n      this.inputWrapper.className = 'input-wrapper';\r\n      this.container.append(this.inputWrapper);\r\n    }\r\n\r\n    this.element.append(this.container);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// import { IS_MOBILE_SAFARI, IS_SAFARI } from \"../environment/userAgent\";\r\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\r\nimport InputField, { InputFieldOptions } from \"./inputField\";\r\n\r\nexport default class PasswordInputField extends InputField {\r\n  public passwordVisible = false;\r\n  public toggleVisible: HTMLElement;\r\n  public onVisibilityClickAdditional: () => void;\r\n\r\n  constructor(options: InputFieldOptions = {}) {\r\n    super({\r\n      plainText: true,\r\n      ...options\r\n    });\r\n\r\n    const input = this.input as HTMLInputElement;\r\n    input.type = 'password';\r\n    input.setAttribute('required', '');\r\n    input.name = 'notsearch_password';\r\n    input.autocomplete = 'off';\r\n\r\n    /* if(IS_SAFARI && !IS_MOBILE_SAFARI) {\r\n      input.setAttribute('readonly', '');\r\n      input.addEventListener('focus', () => {\r\n        input.removeAttribute('readonly');\r\n      }, {once: true});\r\n    } */\r\n\r\n    // * https://stackoverflow.com/a/35949954/6758968\r\n    const stealthy = document.createElement('input');\r\n    stealthy.classList.add('stealthy');\r\n    stealthy.tabIndex = -1;\r\n    stealthy.type = 'password';\r\n    input.parentElement.prepend(stealthy);\r\n    input.parentElement.insertBefore(stealthy.cloneNode(), input.nextSibling);\r\n\r\n    const toggleVisible = this.toggleVisible = document.createElement('span');\r\n    toggleVisible.classList.add('toggle-visible', 'tgico');\r\n\r\n    this.container.classList.add('input-field-password');\r\n    this.container.append(toggleVisible);\r\n\r\n    toggleVisible.addEventListener('click', this.onVisibilityClick);\r\n    toggleVisible.addEventListener('touchend', this.onVisibilityClick);\r\n  }\r\n\r\n  public onVisibilityClick = (e: Event) => {\r\n    cancelEvent(e);\r\n    this.passwordVisible = !this.passwordVisible;\r\n\r\n    this.toggleVisible.classList.toggle('eye-hidden', this.passwordVisible);\r\n    (this.input as HTMLInputElement).type = this.passwordVisible ? 'text' : 'password';\r\n    this.onVisibilityClickAdditional && this.onVisibilityClickAdditional();\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToSpan(html: string) {\r\n  const span = document.createElement('span');\r\n  span.innerHTML = html;\r\n  return span;\r\n}\r\n"],"sourceRoot":""}