{"version":3,"sources":["webpack:///./src/helpers/dom/isInputEmpty.ts","webpack:///./src/lib/filemanager.ts","webpack:///./src/lib/cacheStorage.ts","webpack:///./src/helpers/dom/replaceContent.ts","webpack:///./src/components/inputField.ts","webpack:///./src/helpers/dom/selectElementContents.ts","webpack:///./src/components/singleTransition.ts","webpack:///./src/helpers/dom/getRichValue.ts","webpack:///./src/helpers/dom/findUpAttribute.ts","webpack:///./src/helpers/dom/getRichElementValue.ts"],"names":["isInputEmpty","element","hasAttribute","tagName","value","trim","blobSupported","e","this","fileWriter","bytes","Blob","then","arr","write","mimeType","saveFileCallback","blobParts","part","push","truncate","length","finalize","saveToStorage","blob","dbName","useStorage","test","STORAGES","openDatabase","openDbPromise","caches","open","entryName","timeoutOperation","cache","delete","match","response","put","fileName","method","get","Response","headers","size","save","callback","Promise","resolve","reject","rejected","timeout","setTimeout","undefined","res","err","clearTimeout","fakeWriter","getFakeFileWriter","saveFile","catch","enabled","all","map","storage","deleteAll","replaceContent","elem","node","innerHTML","firstChild","lastChild","replaceWith","textContent","append","init","document","addEventListener","findUpAttribute","target","text","entities","preventDefault","html","originalEvent","clipboardData","getData","span","createElement","curChild","nextSibling","nodeType","nodeValue","remove","richValue","getRichValue","entities2","parseEntities","filter","_","mergeEntities","wrapDraftText","window","execCommand","InputState","options","container","classList","add","required","validate","maxLength","showLengthOn","Math","min","round","placeholder","name","plainText","canBeEdited","input","processInput","label","labelText","firstElementChild","String","observer","MutationObserver","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","setAttribute","className","border","setLabel","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","diff","isError","toggle","select","el","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","selectElementContents","labelOptions","setHeight","scrollHeight","newHeight","currentHeight","style","height","replace","transitionDuration","log","abs","setValueSilently","fireFakeInput","originalValue","isValid","isChanged","silent","setDraftValue","state","Error","Valid","setState","SetTransition","forwards","duration","onTransitionEnd","useRafs","raf","dataset","cancelAnimationFrame","settings","animationsEnabled","requestAnimationFrame","afterTimeout","field","withEntities","lines","line","join","combineSameEntities","sortEntities","attribute","closest","markdownTags","bold","entityName","underline","italic","monospace","strikethrough","link","mentionName","BLOCK_TAG_NAMES","Set","getRichElementValue","selNode","selOffset","offset","substr","parentNode","parentElement","type","tag","getAttribute","url","href","user_id","follow","toUserId","isSelected","isBlock","has","splice","HTMLImageElement","alt","isTableCell","matches","wasEntitiesLength","i","wasLength"],"mappings":"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","file":"3.47e69b683657b7f63079.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport getRichValue from \"./getRichValue\";\r\n\r\nexport default function isInputEmpty(element: HTMLElement) {\r\n  if(element.hasAttribute('contenteditable') || element.tagName !== 'INPUT') {\r\n    /* const value = element.innerText;\r\n\r\n    return !value.trim() && !serializeNodes(Array.from(element.childNodes)).trim(); */\r\n    return !getRichValue(element, false).value.trim();\r\n  } else {\r\n    return !(element as HTMLInputElement).value.trim();\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { blobConstruct, readBlobAsUint8Array } from \"../helpers/blob\";\r\n\r\nexport class FileManager {\r\n  public blobSupported = true;\r\n  \r\n  constructor() {\r\n    try {\r\n      blobConstruct([], '');\r\n    } catch(e) {\r\n      this.blobSupported = false;\r\n    }\r\n  }\r\n  \r\n  public isAvailable() {\r\n    return this.blobSupported;\r\n  }\r\n  \r\n  public write(fileWriter: ReturnType<FileManager['getFakeFileWriter']>, bytes: Uint8Array | Blob | string): Promise<void> {\r\n    if(bytes instanceof Blob) { // is file bytes\r\n      return readBlobAsUint8Array(bytes).then(arr => {\r\n        return fileWriter.write(arr);\r\n      });\r\n    } else {\r\n      return fileWriter.write(bytes);\r\n    }\r\n  }\r\n\r\n  public getFakeFileWriter(mimeType: string, saveFileCallback?: (blob: Blob) => Promise<Blob>) {\r\n    const blobParts: Array<Uint8Array | string> = [];\r\n    const fakeFileWriter = {\r\n      write: async(part: Uint8Array | string) => {\r\n        if(!this.blobSupported) {\r\n          throw false;\r\n        }\r\n        \r\n        blobParts.push(part);\r\n      },\r\n      truncate: () => {\r\n        blobParts.length = 0;\r\n      },\r\n      finalize: (saveToStorage = true) => {\r\n        const blob = blobConstruct(blobParts, mimeType);\r\n\r\n        if(saveToStorage && saveFileCallback) {\r\n          saveFileCallback(blob);\r\n        }\r\n        \r\n        return blob;\r\n      }\r\n    };\r\n    \r\n    return fakeFileWriter;\r\n  }\r\n}\r\n\r\nexport default new FileManager();\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from '../config/modes';\r\nimport { blobConstruct } from '../helpers/blob';\r\nimport FileManager from './filemanager';\r\n//import { MOUNT_CLASS_TO } from './mtproto/mtproto_config';\r\n//import { logger } from './polyfill';\r\n\r\nexport type CacheStorageDbName = 'cachedFiles' | 'cachedStreamChunks' | 'cachedAssets';\r\n\r\nexport default class CacheStorageController {\r\n  private static STORAGES: CacheStorageController[] = [];\r\n  private openDbPromise: Promise<Cache>;\r\n\r\n  private useStorage = true;\r\n\r\n  //private log: ReturnType<typeof logger> = logger('CS');\r\n\r\n  constructor(private dbName: CacheStorageDbName) {\r\n    if(Modes.test) {\r\n      this.dbName += '_test';\r\n    }\r\n\r\n    if(CacheStorageController.STORAGES.length) {\r\n      this.useStorage = CacheStorageController.STORAGES[0].useStorage;\r\n    }\r\n    \r\n    this.openDatabase();\r\n    CacheStorageController.STORAGES.push(this);\r\n  }\r\n\r\n  private openDatabase(): Promise<Cache> {\r\n    return this.openDbPromise ?? (this.openDbPromise = caches.open(this.dbName));\r\n  }\r\n\r\n  public delete(entryName: string) {\r\n    return this.timeoutOperation((cache) => cache.delete('/' + entryName));\r\n  }\r\n\r\n  public deleteAll() {\r\n    return caches.delete(this.dbName);\r\n  }\r\n\r\n  public get(entryName: string) {\r\n    return this.timeoutOperation((cache) => cache.match('/' + entryName));\r\n  }\r\n\r\n  public save(entryName: string, response: Response) {\r\n    // return new Promise((resolve) => {}); // DEBUG\r\n    return this.timeoutOperation((cache) => cache.put('/' + entryName, response));\r\n  }\r\n\r\n  public getFile(fileName: string, method: 'blob' | 'json' | 'text' = 'blob'): Promise<any> {\r\n    /* if(method === 'blob') {\r\n      return Promise.reject();\r\n    } */\r\n\r\n    // const str = `get fileName: ${fileName}`;\r\n    // console.time(str);\r\n    return this.get(fileName).then((response) => {\r\n      if(!response) {\r\n        //console.warn('getFile:', response, fileName);\r\n        throw 'NO_ENTRY_FOUND';\r\n      }\r\n\r\n      const promise = response[method]();\r\n      // promise.then(() => {\r\n      //   console.timeEnd(str);\r\n      // });\r\n      return promise;\r\n    });\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct(blob) as Blob;\r\n    }\r\n\r\n    const response = new Response(blob, {\r\n      headers: {\r\n        'Content-Length': '' + blob.size\r\n      }\r\n    });\r\n    \r\n    return this.save(fileName, response).then(() => blob as Blob);\r\n  }\r\n\r\n  public timeoutOperation<T>(callback: (cache: Cache) => Promise<T>) {\r\n    if(!this.useStorage) {\r\n      return Promise.reject('STORAGE_OFFLINE');\r\n    }\r\n\r\n    return new Promise<T>(async(resolve, reject) => {\r\n      let rejected = false;\r\n      const timeout = setTimeout(() => {\r\n        reject();\r\n        //console.warn('CACHESTORAGE TIMEOUT');\r\n        rejected = true;\r\n      }, 15e3);\r\n\r\n      try {\r\n        const cache = await this.openDatabase();\r\n        if(!cache) {\r\n          this.useStorage = false;\r\n          this.openDbPromise = undefined;\r\n          throw 'no cache?';\r\n        }\r\n\r\n        const res = await callback(cache);\r\n\r\n        if(rejected) return;\r\n        resolve(res);\r\n      } catch(err) {\r\n        reject(err);\r\n      }\r\n\r\n      clearTimeout(timeout);\r\n    });\r\n  }\r\n\r\n  public getFileWriter(fileName: string, mimeType: string) {\r\n    const fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob).catch(() => blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        return storage.deleteAll();\r\n      }\r\n    }));\r\n  }\r\n}\r\n\r\n//const cacheStorage = new CacheStorageController(); \r\n//MOUNT_CLASS_TO.cacheStorage = cacheStorage;\r\n//export default cacheStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function replaceContent(elem: HTMLElement, node: string | Node) {\r\n  if(typeof(node) === 'string') {\r\n    elem.innerHTML = node;\r\n    return;\r\n  }\r\n\r\n  // * children.length doesn't count text nodes\r\n  const firstChild = elem.firstChild;\r\n  if(firstChild) {\r\n    if(elem.lastChild === firstChild) {\r\n      firstChild.replaceWith(node);\r\n    } else {\r\n      elem.textContent = '';\r\n      elem.append(node);\r\n    }\r\n  } else {\r\n    elem.append(node);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport simulateEvent from \"../helpers/dom/dispatchEvent\";\r\nimport findUpAttribute from \"../helpers/dom/findUpAttribute\";\r\nimport getRichValue from \"../helpers/dom/getRichValue\";\r\nimport isInputEmpty from \"../helpers/dom/isInputEmpty\";\r\nimport selectElementContents from \"../helpers/dom/selectElementContents\";\r\nimport { MessageEntity } from \"../layer\";\r\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\r\nimport RichTextProcessor from \"../lib/richtextprocessor\";\r\nimport SetTransition from \"./singleTransition\";\r\n\r\nlet init = () => {\r\n  document.addEventListener('paste', (e) => {\r\n    if(!findUpAttribute(e.target, 'contenteditable=\"true\"')) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    let text: string, entities: MessageEntity[];\r\n\r\n    // @ts-ignore\r\n    let html: string = (e.originalEvent || e).clipboardData.getData('text/html');\r\n    if(html.trim()) {\r\n      const match = html.match(/<body>([\\s\\S]*)<\\/body>/);\r\n      if(match) {\r\n        html = match[1].trim();\r\n      }\r\n\r\n      let span: HTMLElement = document.createElement('span');\r\n      span.innerHTML = html;\r\n\r\n      let curChild = span.firstChild;\r\n      while(curChild) { // * fix whitespace between elements like <p>asd</p>\\n<p>zxc</p>\r\n        let nextSibling = curChild.nextSibling;\r\n        if(curChild.nodeType === 3) {\r\n          if(!curChild.nodeValue.trim()) {\r\n            curChild.remove();\r\n          }\r\n        }\r\n\r\n        curChild = nextSibling;\r\n      }\r\n\r\n      const richValue = getRichValue(span, true);\r\n      text = richValue.value;\r\n      entities = richValue.entities;\r\n\r\n      let entities2 = RichTextProcessor.parseEntities(text);\r\n      entities2 = entities2.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n      RichTextProcessor.mergeEntities(entities, entities2);\r\n    } else {\r\n      // @ts-ignore\r\n      text = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n\r\n      entities = RichTextProcessor.parseEntities(text);\r\n      entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n    }\r\n\r\n    text = RichTextProcessor.wrapDraftText(text, {entities});\r\n    \r\n    window.document.execCommand('insertHTML', false, text);\r\n  });\r\n\r\n  init = null;\r\n};\r\n\r\n// ! it doesn't respect symbols other than strongs\r\n/* const checkAndSetRTL = (input: HTMLElement) => {\r\n  //const isEmpty = isInputEmpty(input);\r\n  //console.log('input', isEmpty);\r\n\r\n  //const char = [...getRichValue(input)][0];\r\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\r\n  let direction = 'ltr';\r\n  if(char && checkRTL(char)) {\r\n    direction = 'rtl';\r\n  }\r\n\r\n  //console.log('RTL', direction, char);\r\n\r\n  input.style.direction = direction;\r\n}; */\r\n\r\nexport enum InputState {\r\n  Neutral = 0,\r\n  Valid = 1,\r\n  Error = 2\r\n};\r\n\r\nexport type InputFieldOptions = {\r\n  placeholder?: LangPackKey, \r\n  label?: LangPackKey, \r\n  labelOptions?: any[],\r\n  labelText?: string,\r\n  name?: string, \r\n  maxLength?: number, \r\n  showLengthOn?: number,\r\n  plainText?: true,\r\n  animate?: boolean,\r\n  required?: boolean,\r\n  canBeEdited?: boolean,\r\n  validate?: () => boolean\r\n};\r\n\r\nclass InputField {\r\n  public container: HTMLElement;\r\n  public input: HTMLElement;\r\n  public inputFake: HTMLElement;\r\n  public label: HTMLLabelElement;\r\n\r\n  public originalValue: string;\r\n\r\n  public required: boolean;\r\n  public validate: () => boolean;\r\n\r\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\r\n  // protected wasInputFakeClientHeight: number;\r\n  // protected showScrollDebounced: () => void;\r\n\r\n  constructor(public options: InputFieldOptions = {}) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('input-field');\r\n\r\n    this.required = options.required;\r\n    this.validate = options.validate;\r\n\r\n    if(options.maxLength !== undefined && options.showLengthOn === undefined) {\r\n      options.showLengthOn = Math.min(40, Math.round(options.maxLength / 3));\r\n    }\r\n\r\n    const {placeholder, maxLength, showLengthOn, name, plainText, canBeEdited = true} = options;\r\n\r\n    let label = options.label || options.labelText;\r\n\r\n    let input: HTMLElement;\r\n    if(!plainText) {\r\n      if(init) {\r\n        init();\r\n      }\r\n\r\n      this.container.innerHTML = `\r\n      <div contenteditable=\"${String(!!canBeEdited)}\" class=\"input-field-input\"></div>\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      const observer = new MutationObserver(() => {\r\n        //checkAndSetRTL(input);\r\n\r\n        if(processInput) {\r\n          processInput();\r\n        }\r\n      });\r\n\r\n      // * because if delete all characters there will br left\r\n      input.addEventListener('input', () => {\r\n        if(isInputEmpty(input)) {\r\n          input.innerHTML = '';\r\n        }\r\n\r\n        if(this.inputFake) {\r\n          this.inputFake.innerHTML = input.innerHTML;\r\n          this.onFakeInput();\r\n        }\r\n      });\r\n      \r\n      // ! childList for paste first symbol\r\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\r\n\r\n      if(options.animate) {\r\n        input.classList.add('scrollable', 'scrollable-y');\r\n        // this.wasInputFakeClientHeight = 0;\r\n        // this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\r\n        this.inputFake = document.createElement('div');\r\n        this.inputFake.setAttribute('contenteditable', 'true');\r\n        this.inputFake.className = input.className + ' input-field-input-fake';\r\n      }\r\n    } else {\r\n      this.container.innerHTML = `\r\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      //input.addEventListener('input', () => checkAndSetRTL(input));\r\n    }\r\n\r\n    input.setAttribute('dir', 'auto');\r\n\r\n    if(placeholder) {\r\n      _i18n(input, placeholder, undefined, 'placeholder');\r\n\r\n      if(this.inputFake) {\r\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\r\n      }\r\n    }\r\n\r\n    if(label || placeholder) {\r\n      const border = document.createElement('div');\r\n      border.classList.add('input-field-border');\r\n      this.container.append(border);\r\n    }\r\n\r\n    if(label) {\r\n      this.label = document.createElement('label');\r\n      this.setLabel();\r\n      this.container.append(this.label);\r\n    }\r\n\r\n    let processInput: () => void;\r\n    if(maxLength) {\r\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\r\n      let showingLength = false;\r\n\r\n      processInput = () => {\r\n        const wasError = input.classList.contains('error');\r\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\r\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input, false).value].length;\r\n        const diff = maxLength - inputLength;\r\n        const isError = diff < 0;\r\n        input.classList.toggle('error', isError);\r\n\r\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\r\n\r\n        if(isError || diff <= showLengthOn) {\r\n          this.setLabel();\r\n          labelEl.append(` (${maxLength - inputLength})`);\r\n          if(!showingLength) showingLength = true;\r\n        } else if((wasError && !isError) || showingLength) {\r\n          this.setLabel();\r\n          showingLength = false;\r\n        }\r\n      };\r\n\r\n      input.addEventListener('input', processInput);\r\n    }\r\n\r\n    this.input = input;\r\n  }\r\n\r\n  public select() {\r\n    if(!this.value) { // * avoid selecting whole empty field on iOS devices\r\n      return;\r\n    }\r\n\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).select(); // * select text\r\n    } else {\r\n      selectElementContents(this.input);\r\n    }\r\n  }\r\n\r\n  public setLabel() {\r\n    this.label.textContent = '';\r\n    if(this.options.labelText) {\r\n      this.label.innerHTML = this.options.labelText;\r\n    } else {\r\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\r\n    }\r\n  }\r\n\r\n  public onFakeInput(setHeight = true) {\r\n    const {scrollHeight: newHeight/* , clientHeight */} = this.inputFake;\r\n    /* if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\r\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\r\n      this.showScrollDebounced();\r\n    } */\r\n\r\n    const currentHeight = +this.input.style.height.replace('px', '');\r\n    if(currentHeight === newHeight) {\r\n      return;\r\n    }\r\n\r\n    const TRANSITION_DURATION_FACTOR = 50;\r\n    const transitionDuration = Math.round(\r\n      TRANSITION_DURATION_FACTOR * Math.log(Math.abs(newHeight - currentHeight)),\r\n    );\r\n\r\n    // this.wasInputFakeClientHeight = clientHeight;\r\n    this.input.style.transitionDuration = `${transitionDuration}ms`;\r\n\r\n    if(setHeight) {\r\n      this.input.style.height = newHeight ? newHeight + 'px' : '';\r\n    }\r\n\r\n    const className = 'is-changing-height';\r\n    SetTransition(this.input, className, true, transitionDuration, () => {\r\n      this.input.classList.remove(className);\r\n    });\r\n  }\r\n\r\n  get value() {\r\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input, false).value;\r\n    //return getRichValue(this.input);\r\n  }\r\n\r\n  set value(value: string) {\r\n    this.setValueSilently(value, false);\r\n\r\n    simulateEvent(this.input, 'input');\r\n  }\r\n\r\n  public setValueSilently(value: string, fireFakeInput = true) {\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).value = value;\r\n    } else {\r\n      this.input.innerHTML = value;\r\n      \r\n      if(this.inputFake) {\r\n        this.inputFake.innerHTML = value;\r\n\r\n        if(fireFakeInput) {\r\n          this.onFakeInput();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isChanged() {\r\n    return this.value !== this.originalValue;\r\n  }\r\n\r\n  public isValid() {\r\n    return !this.input.classList.contains('error') && \r\n      (!this.validate || this.validate()) && \r\n      (!this.required || !isInputEmpty(this.input));\r\n  }\r\n\r\n  public isValidToChange() {\r\n    return this.isValid() && this.isChanged();\r\n  }\r\n\r\n  public setDraftValue(value = '', silent = false) {\r\n    if(!this.options.plainText) {\r\n      value = RichTextProcessor.wrapDraftText(value);\r\n    }\r\n\r\n    if(silent) {\r\n      this.setValueSilently(value, false); \r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\r\n    this.originalValue = value;\r\n    this.setDraftValue(value, silent);\r\n  }\r\n\r\n  public setState(state: InputState, label?: LangPackKey) {\r\n    if(label) {\r\n      this.label.textContent = '';\r\n      this.label.append(i18n(label, this.options.labelOptions));\r\n    }\r\n\r\n    this.input.classList.toggle('error', !!(state & InputState.Error));\r\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\r\n  }\r\n\r\n  public setError(label?: LangPackKey) {\r\n    this.setState(InputState.Error, label);\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","// https://stackoverflow.com/a/6150060\nexport default function selectElementContents(el: HTMLElement) {\n  const range = document.createRange();\n  range.selectNodeContents(el);\n  const sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range);\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport rootScope from \"../lib/rootScope\";\r\n\r\nconst SetTransition = (\r\n  element: HTMLElement, \r\n  className: string, \r\n  forwards: boolean, \r\n  duration: number, \r\n  onTransitionEnd?: () => void, \r\n  useRafs?: number\r\n) => {\r\n  const {timeout, raf} = element.dataset;\r\n  if(timeout !== undefined) {\r\n    clearTimeout(+timeout);\r\n  }\r\n\r\n  if(raf !== undefined) {\r\n    window.cancelAnimationFrame(+raf);\r\n    if(!useRafs) {\r\n      delete element.dataset.raf;\r\n    }\r\n  }\r\n\r\n  // if(forwards && className && element.classList.contains(className) && !element.classList.contains('animating')) {\r\n  //   return;\r\n  // }\r\n\r\n  if(useRafs && rootScope.settings.animationsEnabled && duration) {\r\n    element.dataset.raf = '' + window.requestAnimationFrame(() => {\r\n      delete element.dataset.raf;\r\n      SetTransition(element, className, forwards, duration, onTransitionEnd, useRafs - 1);\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  if(forwards && className) {\r\n    element.classList.add(className);\r\n  }\r\n\r\n  const afterTimeout = () => {\r\n    delete element.dataset.timeout;\r\n    if(!forwards && className) {\r\n      element.classList.remove('backwards', className);\r\n    }\r\n\r\n    element.classList.remove('animating');\r\n    \r\n    onTransitionEnd && onTransitionEnd();\r\n  };\r\n\r\n  if(!rootScope.settings.animationsEnabled || !duration) {\r\n    element.classList.remove('animating', 'backwards');\r\n    afterTimeout();\r\n    return;\r\n  }\r\n\r\n  element.classList.add('animating');\r\n\r\n  element.classList.toggle('backwards', !forwards);\r\n  element.dataset.timeout = '' + setTimeout(afterTimeout, duration);\r\n};\r\n\r\nexport default SetTransition;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { MessageEntity } from \"../../layer\";\r\nimport RichTextProcessor from \"../../lib/richtextprocessor\";\r\nimport getRichElementValue from \"./getRichElementValue\";\r\n\r\nexport default function getRichValue(field: HTMLElement, withEntities = true) {\r\n  const lines: string[] = [];\r\n  const line: string[] = [];\r\n\r\n  const entities: MessageEntity[] = withEntities ? [] : undefined;\r\n  getRichElementValue(field, lines, line, undefined, undefined, entities);\r\n  if(line.length) {\r\n    lines.push(line.join(''));\r\n  }\r\n\r\n  let value = lines.join('\\n');\r\n  value = value.replace(/\\u00A0/g, ' ');\r\n\r\n  if(entities?.length) {\r\n    // ! cannot do that here because have the same check before the sending in RichTextProcessor.parseMarkdown\r\n    /* const entity = entities[entities.length - 1];\r\n    const length = value.length;\r\n    const trimmedLength = value.trimRight().length;\r\n    if(length !== trimmedLength) {\r\n      entity.length -= length - trimmedLength;\r\n    } */\r\n\r\n    RichTextProcessor.combineSameEntities(entities);\r\n    RichTextProcessor.sortEntities(entities);\r\n  }\r\n\r\n  //console.log('getRichValue:', value, entities);\r\n\r\n  return {value, entities};\r\n}\r\n\r\nMOUNT_CLASS_TO.getRichValue = getRichValue;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function findUpAttribute(el: any, attribute: string): HTMLElement {\r\n  return el.closest(`[${attribute}]`);\r\n  /* if(el.getAttribute(attribute) !== null) return el; // 03.02.2020\r\n\r\n  while(el.parentElement) {\r\n    el = el.parentElement;\r\n    if(el.getAttribute(attribute) !== null) \r\n      return el;\r\n  }\r\n  return null; */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\n\r\nexport type MarkdownType = 'bold' | 'italic' | 'underline' | 'strikethrough' | 'monospace' | 'link' | 'mentionName';\r\nexport type MarkdownTag = {\r\n  match: string,\r\n  entityName: 'messageEntityBold' | 'messageEntityUnderline' | 'messageEntityItalic' | 'messageEntityPre' | 'messageEntityStrike' | 'messageEntityTextUrl' | 'messageEntityMentionName';\r\n};\r\n\r\n// https://core.telegram.org/bots/api#html-style\r\nexport const markdownTags: {[type in MarkdownType]: MarkdownTag} = {\r\n  bold: {\r\n    match: '[style*=\"bold\"], [style*=\"font-weight: 700\"], [style*=\"font-weight: 600\"], [style*=\"font-weight:700\"], [style*=\"font-weight:600\"], b, strong',\r\n    entityName: 'messageEntityBold'\r\n  },\r\n  underline: {\r\n    match: '[style*=\"underline\"], u, ins',\r\n    entityName: 'messageEntityUnderline'\r\n  },\r\n  italic: {\r\n    match: '[style*=\"italic\"], i, em',\r\n    entityName: 'messageEntityItalic'\r\n  },\r\n  monospace: {\r\n    match: '[style*=\"monospace\"], [face=\"monospace\"], pre',\r\n    entityName: 'messageEntityPre'\r\n  },\r\n  strikethrough: {\r\n    match: '[style*=\"line-through\"], strike, del, s',\r\n    entityName: 'messageEntityStrike'\r\n  },\r\n  link: {\r\n    match: 'A:not(.follow)',\r\n    entityName: 'messageEntityTextUrl'\r\n  },\r\n  mentionName: {\r\n    match: 'A.follow',\r\n    entityName: 'messageEntityMentionName'\r\n  }\r\n};\r\n\r\nconst tabulationMatch = '[style*=\"table-cell\"], th, td';\r\n\r\n/* export function getDepth(child: Node, container?: Node) {\r\n  let depth = 0;\r\n\r\n  do {\r\n    if(child === container) {\r\n      return depth;\r\n    }\r\n\r\n    ++depth;\r\n  } while((child = child.parentNode) !== null);\r\n\r\n  return depth;\r\n} */\r\n\r\nconst BLOCK_TAG_NAMES = new Set([\r\n  'DIV',\r\n  'P',\r\n  'BR',\r\n  'LI',\r\n  'SECTION',\r\n  'H6',\r\n  'H5',\r\n  'H4',\r\n  'H3',\r\n  'H2',\r\n  'H1',\r\n  'TR'\r\n]);\r\n\r\nexport default function getRichElementValue(node: HTMLElement, lines: string[], line: string[], selNode?: Node, selOffset?: number, entities?: MessageEntity[], offset = {offset: 0}) {\r\n  if(node.nodeType === 3) { // TEXT\r\n    let nodeValue = node.nodeValue;\r\n\r\n    /* const tabulation = node.parentElement?.closest(tabulationMatch + ', [contenteditable]');\r\n    if(tabulation?.getAttribute('contenteditable') === null) {\r\n      nodeValue += ' ';\r\n      // line.push('\\t');\r\n      // ++offset.offset;\r\n    } */\r\n\r\n    if(selNode === node) {\r\n      line.push(nodeValue.substr(0, selOffset) + '\\x01' + nodeValue.substr(selOffset));\r\n    } else {\r\n      line.push(nodeValue);\r\n    }\r\n\r\n    if(entities && nodeValue.length) {\r\n      if(node.parentNode) {\r\n        const parentElement = node.parentElement;\r\n        \r\n        // let closestTag: MarkdownTag, closestElementByTag: Element, closestDepth = Infinity;\r\n        for(const type in markdownTags) {\r\n          const tag = markdownTags[type as MarkdownType];\r\n          const closest = parentElement.closest(tag.match + ', [contenteditable]');\r\n          if(closest?.getAttribute('contenteditable') !== null) {\r\n            /* const depth = getDepth(closest, parentElement.closest('[contenteditable]'));\r\n            if(closestDepth > depth) {\r\n              closestDepth = depth;\r\n              closestTag = tag;\r\n              closestElementByTag = closest;\r\n            } */\r\n            continue;\r\n          }\r\n\r\n          if(tag.entityName === 'messageEntityTextUrl') {\r\n            entities.push({\r\n              _: tag.entityName,\r\n              url: (closest as HTMLAnchorElement).href,\r\n              offset: offset.offset,\r\n              length: nodeValue.length\r\n            });\r\n          } else if(tag.entityName === 'messageEntityMentionName') {\r\n            entities.push({\r\n              _: tag.entityName,\r\n              offset: offset.offset,\r\n              length: nodeValue.length,\r\n              user_id: (closest as HTMLElement).dataset.follow.toUserId()\r\n            });\r\n          } else {\r\n            entities.push({\r\n              _: tag.entityName as any,\r\n              offset: offset.offset,\r\n              length: nodeValue.length\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    offset.offset += nodeValue.length;\r\n    return;\r\n  }\r\n\r\n  if(node.nodeType !== 1) { // NON-ELEMENT\r\n    return;\r\n  }\r\n\r\n  const isSelected = selNode === node;\r\n  const isBlock = BLOCK_TAG_NAMES.has(node.tagName);\r\n  if(isBlock && line.length) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n    ++offset.offset;\r\n  } else if(node instanceof HTMLImageElement) {\r\n    const alt = node.alt;\r\n    if(alt) {\r\n      line.push(alt);\r\n      offset.offset += alt.length;\r\n    }\r\n  }\r\n\r\n  if(isSelected && !selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  const isTableCell = node.matches(tabulationMatch);\r\n  const wasEntitiesLength = entities?.length;\r\n\r\n  let curChild = node.firstChild as HTMLElement;\r\n  while(curChild) {\r\n    getRichElementValue(curChild, lines, line, selNode, selOffset, entities, offset);\r\n    curChild = curChild.nextSibling as any;\r\n  }\r\n\r\n  if(isSelected && selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  if(isTableCell && node.nextSibling) {\r\n    line.push(' ');\r\n    ++offset.offset;\r\n\r\n    // * combine entities such as url after adding space\r\n    if(wasEntitiesLength !== undefined) {\r\n      for(let i = wasEntitiesLength, length = entities.length; i < length; ++i) {\r\n        ++entities[i].length;\r\n      }\r\n    }\r\n  }\r\n\r\n  const wasLength = line.length;\r\n  if(isBlock && wasLength) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, wasLength);\r\n    ++offset.offset;\r\n  }\r\n\r\n  if(wasLength && node.tagName === 'P' && node.nextSibling) {\r\n    lines.push('');\r\n    ++offset.offset;\r\n  }\r\n}\r\n"],"sourceRoot":""}